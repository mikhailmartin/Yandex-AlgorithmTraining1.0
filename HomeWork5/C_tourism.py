"""
Туризм

Ограничение времени - 1 секунда
Ограничение памяти - 64Mb
Ввод - стандартный ввод или input.txt
Вывод - стандартный вывод или output.txt

Александр недавно увлекся горным туризмом. Ему уже надоело покорять отдельные
горные пики, и он собирается покорить самую настоящую горную цепь!

Напомним, что Александр живёт в плоском мире. Горная цепь состоит из отрезков,
соединяющих точки на плоскости, каждая из которых находится строго правее
предыдущей (x-координата следующей точки больше, чем у предыдущей). Трассой на
горной цепи называется её часть между двумя фиксированными концами отрезков.

Участок, на котором при движении по трассе координата y (высота) всегда
возрастает, называется подъёмом, величиной подъёма называется разность высот
между начальной и конечной точками участка.

Туристическая компания предлагает на выбор несколько трасс на одной горной цепи.
Александр из-за финансовых трудностей может выбрать для поездки только одну из
этих трасс. Вы решили помочь ему с выбором. Александру важно для каждой трассы
определить суммарную высоту подъёмов на ней. Обратите внимание, что трасса может
идти как слева-направо, так и справа-налево.


Формат ввода:
В первой строке входного файла содержится единственное число N — количество
точек ломаной, задающей горную цепь (1 ≤ N ≤ 30 000). Далее в N строках
содержатся описания точек, каждое из которых состоит из двух целых чисел, x_i и
y_i (1 ≤ x_i, y_i ≤ 30 000).

В следующей строке находится число M — количество трасс (1 ≤ M ≤ 30 000).

Далее в M строках содержатся описания трасс. Каждое описание представляет собой
два целых числа, s_i и f_i, они обозначают номера вершин начала и конца трассы,
соответственно (1 ≤ s_i ≤ N, 1 ≤ f_i ≤ N). Начало и конец трассы могут
совпадать.

Гарантируется, что во входном файле задана именно горная цепь.


Формат вывода:
Для каждой трассы выведите одно число — суммарную высоту подъемов на данной
трассе.


Пример 1
input: 7
input: 2 1
input: 4 5
input: 7 4
input: 8 2
input: 9 6
input: 11 3
input: 15 3
input: 1
input: 2 6
output: 4

Пример 2
input: 6
input: 1 1
input: 3 2
input: 5 6
input: 7 2
input: 10 4
input: 11 1
input: 3
input: 5 6
input: 1 4
input: 4 2
output: 0
output: 5
output: 4
"""


def main(
    n: int,
    mountain_chain: list[tuple[int, int]],
    tracks: list[tuple[int, int]]
) -> list[int]:

    # 0-ий индекс - технический
    # 1-ый индекс - всегда 0
    prefix_sum_forward = [0] * (n+1)
    for i in range(2, n+1):
        ascent = max(mountain_chain[i-1][1] - mountain_chain[i-2][1], 0)
        prefix_sum_forward[i] = prefix_sum_forward[i-1] + ascent

    prefix_sum_backward = [0] * (n+2)
    for i in range(n-1, 0, -1):
        ascent = max(mountain_chain[i-1][1] - mountain_chain[i][1], 0)
        prefix_sum_backward[i] = prefix_sum_backward[i+1] + ascent

    results = []
    for start, finish in tracks:

        if start == finish:
            answer = 0
        elif start < finish:
            answer = prefix_sum_forward[finish] - prefix_sum_forward[start]
        elif start > finish:
            answer = prefix_sum_backward[finish] - prefix_sum_backward[start]

        results.append(answer)

    return results


if __name__ == "__main__":

    n = int(input())
    mountain_chain = [tuple(map(int, input().split())) for _ in range(n)]
    m = int(input())
    tracks = [tuple(map(int, input().split())) for _ in range(m)]

    result = main(n, mountain_chain, tracks)
    print(*result, sep="\n")
