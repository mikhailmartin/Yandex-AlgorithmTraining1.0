"""
Чемпионат по метанию коровьих лепёшек

Ограничение времени - 1 секунда
Ограничение памяти - 64Mb
Ввод - стандартный ввод или input.txt
Вывод - стандартный вывод или output.txt

Ежегодный турнир «Весёлый коровяк» — по метанию коровьих лепёшек на дальность —
прошёл 8–9 июля в селе Крылово Осинского района Пермского края.

Участники соревнований кидают «снаряд» — спрессованный навоз, выбирая его из
заранее заготовленной кучи. Желающих поупражняться в силе броска традиционно
очень много — как мужчин, так и женщин. Каждую лепёшку, которую метнули
участники «Весёлого коровяка», внимательно осматривали женщины в костюмах коров
и тщательно замеряли расстояние.

Соревнования по метанию коровьих лепёшек проводятся в Пермском крае с 2009 года.

К сожалению, после чемпионата потерялись записи с фамилиями участников,
остались только записи о длине броска в том порядке, в котором их совершали
участники.

Тракторист Василий помнит три факта:
1) Число метров, на которое он метнул лепёшку, оканчивалось на 5
2) Один из победителей чемпионата метал лепёшку до Василия
3) Участник, метавший лепёшку сразу после Василия, метнул её на меньшее
количество метров

Будем считать, что участник соревнования занял k-е место, если ровно (k − 1)
участников чемпионата метнули лепёшку строго дальше, чем он.

Какое максимально высокое место мог занять Василий?


Формат ввода:
Первая строка входного файла содержит целое число n — количество участников
чемпионата по метанию лепёшек (3 ≤ n ≤ 10^5).

Вторая строка входного файла содержит n положительных целых чисел, каждое из
которых не превышает 1000, — дальность броска участников чемпионата,
приведённые в том порядке, в котором происходило метание.


Формат вывода:
Выведите самое высокое место, которое мог занять тракторист Василий. Если не
существует ни одного участника чемпионата, который удовлетворяет, описанным
выше условиям, выведите число 0.


Пример 1
input: 7
input: 10 20 15 10 30 5 1
output: 6

Пример 2
input: 3
input: 15 15 10
output: 1

Пример 3
input: 3
input: 10 15 20
output: 0
"""


def find_best_Vasya_place(results: list[int]) -> int:
    """
    Находит самое высокое место, которое мог занять Тракторист Василий.

    """
    left_winner_index = find_left_winner_index(results)

    best_Vasya_result = find_best_Vasya_result(results, left_winner_index)

    if best_Vasya_result != float("-inf"):
        place = 1
        for result in results:
            if result > best_Vasya_result:
                place += 1
    else:
        place = 0

    return place


def find_left_winner_index(results: list[int]) -> int:
    """
    Возвращает индекс левого победителя.

    """
    winner_index = 0
    winner_result = results[winner_index]

    for index, result in enumerate(results):
        if result > winner_result:
            winner_index = index
            winner_result = result

    return winner_index


def find_best_Vasya_result(results: list[int], left_winner_index: int) -> int | float:
    """
    Находит лучший результат, удовлетворяющий условиям.

    """
    best_Vasya_result = float("-inf")

    # Если результат Василия был после победителя, и после результата Василия был ещё
    # результат поменьше, то индекс победителя должен быть максимум предпредпоследним
    # (третьим с конца).
    max_possible_winner_index = len(results) - 3
    if left_winner_index > max_possible_winner_index:
        return best_Vasya_result

    # Можно перебирать кандидатов от левого победителя до предпоследнего результата
    for i in range(left_winner_index+1, len(results) - 1):

        current_result = results[i]
        next_result = results[i+1]

        if (
                (current_result % 10) == 5
                and current_result > next_result
                and current_result > best_Vasya_result
        ):
            best_Vasya_result = current_result

    return best_Vasya_result


if __name__ == "__main__":

    n = int(input())
    results = list(map(int, input().split()))
    place = find_best_Vasya_place(results)
    print(place)
